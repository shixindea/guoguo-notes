import{_ as s,c as n,o as a,a as i}from"./app-jWPQUAbr.js";const e={},l=i(`<h2 id="git-代码管理" tabindex="-1"><a class="header-anchor" href="#git-代码管理"><span>[GIT] 代码管理</span></a></h2><p>每个项目内置 git commit 命令。</p><h3 id="提交的类型" tabindex="-1"><a class="header-anchor" href="#提交的类型"><span>提交的类型</span></a></h3><p>下面的这些只是列举部分，其他可补充。</p><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="line">●wip : 正在进行的工作</span>
<span class="line">●feat: 新功能</span>
<span class="line">●config: 各种项目配置</span>
<span class="line">●fix：修复，包括热修复</span>
<span class="line">●refactor: 重构</span>
<span class="line">●style: 修改样式</span>
<span class="line">●type: typescript 类型重新定义</span>
<span class="line">●update: 更新代码以及解决冲突</span>
<span class="line">●trivia: 琐事，如改个文案，换个图片等</span>
<span class="line">●docs: 仅文档更改</span>
<span class="line">●site: 站点或官网的改进</span>
<span class="line">●test: 添加缺少的测试或更正现有测试</span>
<span class="line">●chore: 不修改项目代码。例如更新生成任务、包管理器、项目配置等</span>
<span class="line">●lint: 代码规范修改</span>
<span class="line">●release: 发布新包</span>
<span class="line">●revert: 恢复到提交</span>
<span class="line">●follow: 追随上一个的提交</span>
<span class="line">●others: 其他改动</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提交格式" tabindex="-1"><a class="header-anchor" href="#提交格式"><span>提交格式</span></a></h3><p>类型(关键词): 描述，如 feat(票务): 列表接口对接完成</p><h3 id="git-分支" tabindex="-1"><a class="header-anchor" href="#git-分支"><span>Git 分支</span></a></h3><p>●新功能(feat)开发，命名：feat-douyin (抖音新功能)</p><p>●修复(fix)分支，如 fix-seat (修复选座)</p><p>●优化(plus)分支，如 plus-seat (优化选座)</p><h3 id="commit-信息" tabindex="-1"><a class="header-anchor" href="#commit-信息"><span>commit 信息</span></a></h3><p>● 一个 commit 干一件事儿，比如创建页面，比如一个页面的切图，比如对接一个页面的接口。只有 commit 干一件事儿了 commit 才容易写，才容易日后追溯。只有 commit 干一件事儿了我们才可以按步骤像完成任务一样玩代码写作品。</p><p>●每天走之前务必提代码。</p><p>●相同 commit 内容后面加版本号如 v2 。</p><h2 id="开发提交步骤" tabindex="-1"><a class="header-anchor" href="#开发提交步骤"><span>开发提交步骤</span></a></h2><p>1 开发之前 更新代码 ( 大家一起用一个分支 ) :</p><p>a下载 origin 线下的所有分支代码，运行： git fetch origin</p><p>b合并 origin 中的 feat-douyin 分支到当前分支： 运行： git merge origin/feat-douyin</p><p>2 咔咔咔写代码。。。</p><p>3 运行 pnpm lint:fix 自动 typescript 检测及代码美化</p><p>4 运行 pnpm gitcz 进行提交，然后自动运行 git commt 规范检测及代码检测</p><p>5 运行 git push origin feat-douyin</p>`,23),p=[l];function t(c,d){return a(),n("div",null,p)}const o=s(e,[["render",t],["__file","GIt 代码提交规范及步骤.html.vue"]]),m=JSON.parse('{"path":"/%E8%A2%81%E6%9E%9C%E9%94%85%E7%94%9F%E6%80%81/GIt%20%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83%E5%8F%8A%E6%AD%A5%E9%AA%A4.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"[GIT] 代码管理","slug":"git-代码管理","link":"#git-代码管理","children":[{"level":3,"title":"提交的类型","slug":"提交的类型","link":"#提交的类型","children":[]},{"level":3,"title":"提交格式","slug":"提交格式","link":"#提交格式","children":[]},{"level":3,"title":"Git 分支","slug":"git-分支","link":"#git-分支","children":[]},{"level":3,"title":"commit 信息","slug":"commit-信息","link":"#commit-信息","children":[]}]},{"level":2,"title":"开发提交步骤","slug":"开发提交步骤","link":"#开发提交步骤","children":[]}],"git":{"updatedTime":1732177417000,"contributors":[{"name":"袁果锅","email":"2914310412@qq.com","commits":1}]},"filePathRelative":"袁果锅生态/GIt 代码提交规范及步骤.md","excerpt":"<h2>[GIT] 代码管理</h2>\\n<p>每个项目内置 git commit 命令。</p>\\n<h3>提交的类型</h3>\\n<p>下面的这些只是列举部分，其他可补充。</p>\\n<div class=\\"language-diff\\" data-highlighter=\\"prismjs\\" data-ext=\\"diff\\" data-title=\\"diff\\"><pre class=\\"language-diff\\"><code><span class=\\"line\\">●wip : 正在进行的工作</span>\\n<span class=\\"line\\">●feat: 新功能</span>\\n<span class=\\"line\\">●config: 各种项目配置</span>\\n<span class=\\"line\\">●fix：修复，包括热修复</span>\\n<span class=\\"line\\">●refactor: 重构</span>\\n<span class=\\"line\\">●style: 修改样式</span>\\n<span class=\\"line\\">●type: typescript 类型重新定义</span>\\n<span class=\\"line\\">●update: 更新代码以及解决冲突</span>\\n<span class=\\"line\\">●trivia: 琐事，如改个文案，换个图片等</span>\\n<span class=\\"line\\">●docs: 仅文档更改</span>\\n<span class=\\"line\\">●site: 站点或官网的改进</span>\\n<span class=\\"line\\">●test: 添加缺少的测试或更正现有测试</span>\\n<span class=\\"line\\">●chore: 不修改项目代码。例如更新生成任务、包管理器、项目配置等</span>\\n<span class=\\"line\\">●lint: 代码规范修改</span>\\n<span class=\\"line\\">●release: 发布新包</span>\\n<span class=\\"line\\">●revert: 恢复到提交</span>\\n<span class=\\"line\\">●follow: 追随上一个的提交</span>\\n<span class=\\"line\\">●others: 其他改动</span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{o as comp,m as data};
