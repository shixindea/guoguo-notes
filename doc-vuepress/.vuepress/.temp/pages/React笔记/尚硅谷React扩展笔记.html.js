import comp from "F:/my-project/guoguo-notes/doc-vuepress/.vuepress/.temp/pages/React笔记/尚硅谷React扩展笔记.html.vue"
const data = JSON.parse("{\"path\":\"/React%E7%AC%94%E8%AE%B0/%E5%B0%9A%E7%A1%85%E8%B0%B7React%E6%89%A9%E5%B1%95%E7%AC%94%E8%AE%B0.html\",\"title\":\"React扩展\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"React扩展\",\"date\":\"2022-08-04T00:00:00.000Z\",\"tags\":[\"React\"],\"categories\":[\"自学篇\"]},\"headers\":[{\"level\":2,\"title\":\"1. setState\",\"slug\":\"_1-setstate\",\"link\":\"#_1-setstate\",\"children\":[{\"level\":3,\"title\":\"setState更新状态的2种写法\",\"slug\":\"setstate更新状态的2种写法\",\"link\":\"#setstate更新状态的2种写法\",\"children\":[]}]},{\"level\":2,\"title\":\"2. lazyLoad\",\"slug\":\"_2-lazyload\",\"link\":\"#_2-lazyload\",\"children\":[{\"level\":3,\"title\":\"路由组件的lazyLoad\",\"slug\":\"路由组件的lazyload\",\"link\":\"#路由组件的lazyload\",\"children\":[]}]},{\"level\":2,\"title\":\"3. Hooks\",\"slug\":\"_3-hooks\",\"link\":\"#_3-hooks\",\"children\":[]},{\"level\":2,\"title\":\"4. Fragment\",\"slug\":\"_4-fragment\",\"link\":\"#_4-fragment\",\"children\":[{\"level\":3,\"title\":\"使用\",\"slug\":\"使用\",\"link\":\"#使用\",\"children\":[]},{\"level\":3,\"title\":\"作用\",\"slug\":\"作用\",\"link\":\"#作用\",\"children\":[]},{\"level\":3,\"title\":\"理解\",\"slug\":\"理解\",\"link\":\"#理解\",\"children\":[]},{\"level\":3,\"title\":\"使用\",\"slug\":\"使用-1\",\"link\":\"#使用-1\",\"children\":[]},{\"level\":3,\"title\":\"注意\",\"slug\":\"注意\",\"link\":\"#注意\",\"children\":[]},{\"level\":3,\"title\":\"Component的2个问题\",\"slug\":\"component的2个问题\",\"link\":\"#component的2个问题\",\"children\":[]},{\"level\":3,\"title\":\"效率高的做法\",\"slug\":\"效率高的做法\",\"link\":\"#效率高的做法\",\"children\":[]},{\"level\":3,\"title\":\"原因\",\"slug\":\"原因\",\"link\":\"#原因\",\"children\":[]},{\"level\":3,\"title\":\"解决\",\"slug\":\"解决\",\"link\":\"#解决\",\"children\":[]},{\"level\":3,\"title\":\"如何向组件内部动态传入带内容的结构(标签)?\",\"slug\":\"如何向组件内部动态传入带内容的结构-标签\",\"link\":\"#如何向组件内部动态传入带内容的结构-标签\",\"children\":[]},{\"level\":3,\"title\":\"children props\",\"slug\":\"children-props\",\"link\":\"#children-props\",\"children\":[]},{\"level\":3,\"title\":\"render props\",\"slug\":\"render-props\",\"link\":\"#render-props\",\"children\":[]}]},{\"level\":2,\"title\":\"9. 组件通信方式总结\",\"slug\":\"_9-组件通信方式总结\",\"link\":\"#_9-组件通信方式总结\",\"children\":[]}],\"git\":{\"updatedTime\":1721805748000,\"contributors\":[{\"name\":\"袁果锅\",\"email\":\"2914310412@qq.com\",\"commits\":1}]},\"filePathRelative\":\"React笔记/尚硅谷React扩展笔记.md\",\"excerpt\":\"<h2>1. setState</h2>\\n<h3>setState更新状态的2种写法</h3>\\n<div class=\\\"language-text\\\" data-highlighter=\\\"prismjs\\\" data-ext=\\\"text\\\" data-title=\\\"text\\\"><pre class=\\\"language-text\\\"><code><span class=\\\"line\\\">\\t(1). setState(stateChange, [callback])------对象式的setState</span>\\n<span class=\\\"line\\\">            1.stateChange为状态改变对象(该对象可以体现出状态的更改)</span>\\n<span class=\\\"line\\\">            2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用</span>\\n<span class=\\\"line\\\">\\t\\t\\t\\t\\t</span>\\n<span class=\\\"line\\\">\\t(2). setState(updater, [callback])------函数式的setState</span>\\n<span class=\\\"line\\\">            1.updater为返回stateChange对象的函数。</span>\\n<span class=\\\"line\\\">            2.updater可以接收到state和props。</span>\\n<span class=\\\"line\\\">            4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。</span>\\n<span class=\\\"line\\\">总结:</span>\\n<span class=\\\"line\\\">\\t\\t1.对象式的setState是函数式的setState的简写方式(语法糖)</span>\\n<span class=\\\"line\\\">\\t\\t2.使用原则：</span>\\n<span class=\\\"line\\\">\\t\\t\\t\\t(1).如果新状态不依赖于原状态 ===&gt; 使用对象方式</span>\\n<span class=\\\"line\\\">\\t\\t\\t\\t(2).如果新状态依赖于原状态 ===&gt; 使用函数方式</span>\\n<span class=\\\"line\\\">\\t\\t\\t\\t(3).如果需要在setState()执行后获取最新的状态数据, </span>\\n<span class=\\\"line\\\">\\t\\t\\t\\t\\t要在第二个callback函数中读取</span>\\n<span class=\\\"line\\\"></span></code></pre></div>\"}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
